---
- name: Configure Nginx webserver with SSL termination
  hosts: nodes
  gather_facts: true
  become: true

  vars:
    nginx_port_no_tls: 80
    nginx_port_tls: 443
    server_hostname: "example.com"
    crt_controller_dir: "/etc/ssl/certs/{{ server_hostname }}"
    crt_compute_dir: "/etc/ssl/certs/{{ server_hostname }}"
    privatekey_filename: "private_key.pem"
    csr_filename: "{{ server_hostname }}.csr"
    crt_filename: "fullchain.pem"
    site_dir: "/usr/share/nginx/html/{{ server_hostname }}"
    controller_venv_path: "/home/ansible/venv/"
    generate_crt: false

  pre_tasks:
    - name: CONTROLLER | PIP | Check required packages presented 
      pip:
        state: latest
        name:
          - selinux
          - pyOpenSSL
        virtualenv: "{{ controller_venv_path }}"
      delegate_to: localhost
      run_once: true

    - name: CONTROLLER | SSL | Ensure controller crt dir exists
      file:
        path: "{{ crt_controller_dir }}"
        state: directory
      delegate_to: localhost
      run_once: true

    - name: CONTROLLER | SSL | Check cert and key exists
      stat:
        path: "{{ crt_controller_dir }}/{{ item }}"
      register: check_cert_files_exists
      loop:
        - "{{ privatekey_filename }}"
        - "{{ crt_filename }}"
      delegate_to: localhost
      run_once: true

    - name: CONTROLLER | SSL | Check cert and key are missing and need generate
      set_fact:
        generate_crt: true
      with_items: "{{ check_cert_files_exists.results }}"
      when: item.stat.exists == false
      delegate_to: localhost
      run_once: true

    - name: CONTROLLER | SSL | Check cert expiration
      openssl_certificate:
        path: "{{ crt_controller_dir }}/{{ crt_filename }}"
        provider: assertonly
        has_expired: False
      register: check_crt_validity
      when: generate_crt == false
      delegate_to: localhost
      run_once: true

    - name: CONTROLLER | SSL | Check cert expired and need generate
      set_fact:
        generate_crt: true
      when: generate_crt == false and check_crt_validity.failed
      delegate_to: localhost
      run_once: true

    - name: CONTROLLER | SSL | Generate privatekey
      openssl_privatekey:
        path: "{{ crt_controller_dir }}/{{ privatekey_filename }}"
        owner: ansible
        mode: 0600
      when: generate_crt == true
      delegate_to: localhost
      run_once: true

    - name: CONTROLLER | SSL | Generate csr
      openssl_csr:
        path: "{{ crt_controller_dir }}/{{ csr_filename }}"
        privatekey_path: "{{ crt_controller_dir }}/{{ privatekey_filename }}"
        common_name: "{{ server_hostname }}"
        owner: ansible
        mode: 0600
      when: generate_crt == true
      delegate_to: localhost
      run_once: true

    - name: CONTROLLER | SSL | Generate crt
      openssl_certificate:
        path: "{{ crt_controller_dir }}/{{ crt_filename }}"
        privatekey_path: "{{ crt_controller_dir }}/{{ privatekey_filename }}"
        csr_path: "{{ crt_controller_dir }}/{{ csr_filename }}"
        provider: selfsigned
        owner: ansible
        mode: 0600
      when: generate_crt == true
      delegate_to: localhost
      run_once: true

  tasks:
    - name: FIREWALLD | Enable ports
      firewalld:
        port: "{{ item }}/tcp"
        permanent: true
        state: enabled
        immediate: true
      ignore_errors: true
      loop:
        - "{{ nginx_port_no_tls }}"
        - "{{ nginx_port_tls }}"

    - name: YUM | Setup Nginx repos
      copy:
        src: nginx.repo
        dest: /etc/yum.repos.d/nginx.repo
        owner: root
        group: root
        mode: 0600

    - name: YUM | Install Nginx
      yum:
        name: nginx
        update_cache: true
        state: present

    - name: SSL | Ensure compute crt dir exists
      file:
        path: "{{ crt_compute_dir }}"
        state: directory

    - name: SSL | Copy crt and key from controller to compute
      copy:
        src: "{{ crt_controller_dir }}/{{ item }}"
        dest: "{{ crt_compute_dir }}/{{ item }}"
        owner: nginx
        group: nginx
        mode: 0600
      loop:
        - "{{ privatekey_filename }}"
        - "{{ crt_filename }}"
      notify: SYSTEMD | Restart Nginx

    - name: NGINX | Copy nginx.conf
      copy:
        src: files/nginx.conf
        dest: /etc/nginx/nginx.conf
        owner: nginx
        group: nginx
        mode: 0600
      notify: SYSTEMD | Restart Nginx

    - name: NGINX | Remove default config
      file:
        state: absent
        path: /etc/nginx/conf.d/default.conf
      notify: SYSTEMD | Restart Nginx

    - name: NGINX | Copy host config
      template:
        src: templates/site.conf.j2
        dest: "/etc/nginx/conf.d/{{ server_hostname }}.conf"
        owner: nginx
        group: nginx
        mode: 0600
      notify: SYSTEMD | Restart Nginx

    - name: NGINX | Ensure site dir exists
      file:
        path: "{{ site_dir }}"
        state: directory

    - name: NGINX | Copy index.html
      template:
        src: templates/index.html.j2
        dest: "{{ site_dir }}/index.html"
        owner: nginx
        group: nginx
        mode: 0600
      notify: SYSTEMD | Restart Nginx

    - name: SYSTEMD | Ensure Nginx is enabled and started
      service:
        name: nginx
        state: started
        enabled: true

  post_tasks:
    - name: HTTP | Check web site from control server | TLS
      uri:
        url: "https://{{ ansible_host }}:{{ nginx_port_tls }}"
        return_content: true
        validate_certs: false
      connection: local
      register: http_tls_check
      failed_when: http_tls_check.status != 200
      retries: 6
      delay: 5

    - name: HTTP | Check web site from control server | No TLS
      uri:
        url: "http://{{ ansible_host }}:{{ nginx_port_no_tls }}"
        return_content: true
        validate_certs: false
      connection: local
      register: http_not_tls_check
      failed_when: http_not_tls_check.status != 200
      retries: 6
      delay: 5

  handlers:
    - name: SYSTEMD | Restart Nginx
      service:
        name: nginx
        state: restarted
